<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="proj21_shop.mapper.admin.order.AdminOrderMapper">

	<!-- 주문이 있는지 없는지 확인 -->
	<select id="atLeastOneOrder" resultType="String">
		select if(count(*)=0,'false','true')
		from `order`
	</select>
	<!-- 총 판매 금액 -->
	<select id="getTotalRevenue" resultType="int">
		select sum(order_pro_quantity * order_price)
		from `order`
	</select>
	<!-- 총 주문 건 수 -->
	<select id="getTotalOrderCount" resultType="int">
		select count(distinct order_pro_num)
		from `order`
	</select>
	<!-- 총 주문 수 -->
	<select id="selectTotalOrders" resultType="int">
		select count(*)
		from `order`
	</select>
	<!-- 배송 준비 중 수 -->
	<select id="selectAllWaitingDelivery" resultType="int" parameterType="String">
		select count(*)
		from `order`
		where delivery_status='배송준비중'
	</select>
	<!-- 배송 중 수 -->
	<select id="selectAllOnDelivery" resultType="int" parameterType="String">
		select count(*)
		from `order`
		where delivery_status='배송 중'
	</select>
	<!-- 배송 완료 수 -->
	<select id="selectAllTotDoneDelivery" resultType="int" parameterType="String">
		select count(*)
		from `order`
		where delivery_status='배송 완료'
	</select>
	<!-- 환불 완료 수 -->
	<select id="selectAllDoneRefund" resultType="int" parameterType="String">
		select count(*)
		from `order`
		where delivery_status='반품 완료'
	</select>
	<!-- 환불 대기 수 -->
	<select id="selectAllWaitingRefund" resultType="int" parameterType="String">
		select count(*)
		from `order`
		where delivery_status='반품 대기중'
	</select>

	<select id="selectOrderList" resultType="OrderDTO" parameterType="map">
		SELECT	a.*, c.pro_imagefilename ,	p.pro_name
  		  FROM (SELECT FORMAT(@ROWNUM := @ROWNUM + 1, 0) AS rn,	order_code,	order_date,	order_pro_quantity,
  		  	   p.pro_price-(p.pro_salesrate*0.01*p.pro_price) AS order_price,
  			   delivery_status, order_member_name,	request_to_delivery, which_bank, order_pro_num,	p.pro_num,
        	   p.pro_color, p.pro_size
		 WHERE c.pro_imagefilename > 0
		<choose>
			<when test="orderProNum != null">
			   and o.order_pro_num = #{orderProNum}
			</when>
			<otherwise></otherwise>
		</choose>
		<if test="delivery_status !=null and total ==null and !delivery_status.equals('all') and !delivery_status.equals('')">
			   and o.delivery_status=#{deliveryStatus}
		</if>
		<if test="order_member_name !=null">
			   and o.order_member_name like CONCAT('%',#{keyword},'%')
		</if>
			  )a,product p JOIN pro_img c ON p.pro_num = c.pro_num
		 WHERE c.pro_img_state=1
			   AND p.pro_num = a.pro_num
			   AND rn
			   BETWEEN (#{section,jdbcType=NUMERIC}-1)*100+(#{pageNum,jdbcType=NUMERIC}-1)*10+1
			       AND (#{section,jdbcType=NUMERIC}-1)*100+#{pageNum,jdbcType=NUMERIC}*10
		<if test="order_price !=null and !order_price.equals('')">
			<choose>
				<when test="orderPrice.equals('price_desc')">
					ORDER BY a.order_price DESC
				</when>
				<when test="orderPrice.equals('price_asc')">
					ORDER BY a.order_price ASC
				</when>
			</choose>
		</if>
	</select>

	<update id="updateDelivery" parameterType="java.util.Map">
		update order
		   set delivery_status = #{change_deliveryStatus}
		 where order_pro_num = #{change_orderProNum}
	</update>

	<select id="selectedTotal" parameterType="map" resultType="int">
		select count(distinct order_pro_num)
		  from order
		 where
		<choose>
			<when test="order_code != null">
				and order_pro_num = #{orderProNum}
			</when>
			<otherwise>
			</otherwise>
		</choose>
		<if test="deliveryStatus !=null and total !=null and !deliveryStatus.equals('all') and !deliveryStatus.equals('')">
			and delivery_status=#{deliveryStatus}
		</if>
		<if test="orderMemberName !=null">
			and order_member_name like CONCAT('%',#{keyword},'%')
		</if>
	</select>

	<delete id="deleteOrder" parameterType="map">
		delete order
		 where order_pro_num=#{orderProNum}
	</delete>

	<update id="setUpRefund" parameterType="map">
		update order
		   set delivery_status = #{waitingRefund}
		 where order_pro_num = #{orderProNum}
	</update>

</mapper> 